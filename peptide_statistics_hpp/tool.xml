<toolset>

<pathSet base="$base">
    <pathVar name="map_peptides.script" path="map_peptides.py" />
    <pathVar name="next_prot_pe" path="NextProt_PEs.txt" />
    <pathVar name="nextprot_releases" path="nextprot_releases" />
    <pathVar name="predownloaded_pep" path="kb_pep_massive.tsv" />
    <pathVar name="msv_to_pxd_mapping" path="accession_map.json"/>
    <pathVar name="extract_from_mztab.script" path="extract_from_mztab.py" />
    <pathVar name="download_latest_kb.script" path="download_latest_kb.py" />
    <pathVar name="merge_kb_coverage.script" path="merge_kb_coverage.py" />
    <pathVar name="cosine_to_synthetic.script" path="cosine_to_synthetics.py" />
    <pathVar name="peptide_protein_cosine.script" path="peptide_protein_cosine.py" />
    <pathVar name="generate_summary.script" path="generate_summary.py" />
</pathSet>

<pathSet base="extract_peaks_pypkl/0.1">
      <pathVar name="split_identifications_script" path="split_identifications.py"/>
</pathSet>

<pathSet base="anaconda3">
    <toolPath tool="map_peptides" path="bin/python3.5" />
    <toolPath tool="download_latest_kb" path="bin/python3.5" />
    <toolPath tool="extract_from_mztab" path="bin/python3.5" />
    <toolPath tool="peptide_protein_cosine" path="bin/python3.5" />
    <toolPath tool="calculate_cosine" path="bin/python3.5" />
    <toolPath tool="split_identifications" path="bin/python3.5" />
    <toolPath tool="generate_summary" path="bin/python3.5" />
    <toolPath tool="demangle_spec_on_server" path="bin/python3.5" />
</pathSet>

<pathSet base="generate_spectrum_index/1.1">
        <pathVar name="demangle_collection.script" path="demangle_collection.py"/>
    </pathSet>
    
    <tool name="demangle_spec_on_server">
        <require name="input" type="folder"/>
        <require name="params" type="file"/>
        <produce name="output" type="folder"/>

        <execution env="binary" argConvention="adhoc">
            <arg pathRef="demangle_collection.script"/>
            <arg option="-params" valueRef="params"/>
            <arg option="-input_folder" valueRef="input"/>
            <arg option="-input_mangled_prefix" value="spec_on_server"/>
            <arg option="-output_folder" valueRef="output"/>
        </execution>
    </tool>

    <tool name="extract_from_mztab">
        <require name="mztab"    type="folder"/>
        <require name="params"    type="file"/>
        <produce name="peptide_list" type="folder"/>
        <produce name="novel_psms" type="file" naming="explicit"  extension="tsv"/>
        <execution env="binary" argConvention="adhoc">
            <arg pathRef="extract_from_mztab.script"/>
            <arg option="-proteosafe_parameters" valueRef="params"/>
            <arg option="-mztab"        valueRef="mztab"/>
            <arg option="-novel_psms"       valueRef="novel_psms"/>
            <arg option="-peak_tolerance"  valueRef="@peak_tolerance"/>
            <arg option="-peptide_folder"  valueRef="peptide_list"/>
            <arg option="-mapping_parallelism"  valueRef="@parallel_mapping.parallel_mapping"/>
            <arg option="-mztab_score_select"  valueRef="@mztab_score_select"/>
            <arg option="-mztab_score_input"  valueRef="@mztab_score_input"/>
            <arg option="-mztab_score_increasing"  valueRef="@mztab_score_increasing"/>
        </execution>
    </tool>

    <tool name="download_latest_kb">
      <require name="params"    type="file"/>
      <require name="fastadb"            type="folder"/>
      <require name="con_fastadb"            type="folder"/>
      <require name="peptide_coverage_comparisons"    type="folder"/>
      <produce name="kb_pep" type="file" naming="explicit"  extension="out"/>

        <execution env="binary" argConvention="adhoc">
            <arg pathRef="download_latest_kb.script"/>
            <arg option="-params"  valueRef="params"/>
            <arg option="-proteome_fasta"          valueRef="fastadb"/>
            <arg option="-contaminants_fasta"          valueRef="con_fastadb"/>
            <arg option="-comparisons"  valueRef="peptide_coverage_comparisons"/>
            <arg option="-backup_kb_pep"  pathRef="predownloaded_pep"/>
            <arg option="-kb_pep"  valueRef="kb_pep"/>
        </execution>
    </tool>

  <tool name="map_peptides">
      <require name="peptide_list"       type="file"/>
      <require name="fastadb"            type="folder"/>
      <require name="con_fastadb"            type="folder"/>
      <require name="exon_fasta"            type="file"/>
      <produce name="peptide_coverage"        type="folder"/>
      <execution env="binary" argConvention="adhoc">
          <arg pathRef="map_peptides.script"/>
          <arg option="-proteome_fasta"          valueRef="fastadb"/>
          <arg option="-contaminants_fasta"          valueRef="con_fastadb"/>
          <arg option="-exon_fasta"          valueRef="exon_fasta"/>
          <arg option="-peptide_list"   valueRef="peptide_list"/>
          <arg option="-output_folder"  valueRef="peptide_coverage"/>
        </execution>
  </tool>

  <tool name="split_identifications">
       <require name="novel_psms" type="file"/>
       <produce name="novel_psms_p" type="folder" />
       <produce name="jobs" type="folder" />
      <execution env="binary" argConvention="adhoc">
          <arg pathRef="split_identifications_script"/>
          <arg valueRef="novel_psms"/>
          <arg value="NONE"/>
          <arg valueRef="novel_psms_p"/>
          <arg value="spec"/>
          <arg valueRef="jobs"/>
          <arg value="filename"/>
          <arg valueRef="@parallel_cosine.parallel_cosine"/>
      </execution>
</tool>

  <tool name="calculate_cosine">
      <require name="novel_psms_p"          type="folder"/>
      <require name="spectrum_files"         type="folder"/>
      <require name="jobs"                  type="file"/>
      <require name="synthetics"            type="folder"/>
      <produce name="novel_psms_w_cosine"   type="folder"/>
      <execution env="binary" argConvention="adhoc">
          <arg pathRef="cosine_to_synthetic.script"/>
          <arg option="-synthetics"       valueRef="synthetics"/>
          <arg option="-jobs"             valueRef="jobs"/>
          <arg option="-spectrum_files"   valueRef="spectrum_files"/>
          <arg option="-input_psms"       valueRef="novel_psms_p"/>
          <arg option="-output_psms"      valueRef="novel_psms_w_cosine"/>
          <arg option="-peak_tolerance"   valueRef="@peak_tolerance"/>
          <arg option="-cosine_threshold"    valueRef="@cosine_threshold"/>
          <arg option="-explained_intensity"        valueRef="@explained_intensity_threshold"/>
          <arg option="-low_mass_filter"        valueRef="@min_mz"/>
          <arg option="-min_snr"        valueRef="@snr"/>
          <arg option="-filter_synthetics" valueRef="@synthetic_filters"/>
      </execution>
  </tool>

  <tool name="peptide_protein_cosine">
      <require name="kb_pep"    type="file"/>
      <require name="fastadb"            type="folder"/>
      <require name="con_fastadb"            type="folder"/>
      <require name="novel_psms_w_cosine"             type="folder"/>
      <require name="peptide_coverage"                type="folder"/>
      <require name="novel_psms_w_cosine_external"     type="folder"/>
      <require name="peptide_coverage_merged_external" type="folder"/>
      <require name="external_provenance"             type="file"/>
      <produce name="merged_novel_psms_w_cosine"      type="file" naming="explicit"  extension="tsv"/>
      <produce name="novel_peptides_w_cosine"         type="file" naming="explicit"  extension="tsv"/>
      <produce name="novel_proteins_w_cosine"         type="file" naming="explicit"  extension="tsv"/>
    <produce name="novel_exons"         type="file" naming="explicit"  extension="tsv"/>
    <produce name="all_mappings"         type="file" naming="explicit"  extension="tsv"/>
    <produce name="dataset_proteins_hpp"         type="file" naming="explicit"  extension="tsv"/>
        <produce name="dataset_proteins_all"         type="file" naming="explicit"  extension="tsv"/>
            <produce name="task_proteins_hpp"         type="file" naming="explicit"  extension="tsv"/>
        <produce name="task_proteins_all"         type="file" naming="explicit"  extension="tsv"/>
      <produce name="explorer_export"                type="folder"/>

      <execution env="binary" argConvention="adhoc">
          <arg pathRef="peptide_protein_cosine.script"/>
          <arg option="-comparison_pep"               valueRef="kb_pep"/>
          <arg option="-input_psms"           valueRef="novel_psms_w_cosine"/>
          <arg option="-proteome_fasta"          valueRef="fastadb"/>
          <arg option="-contaminants_fasta"          valueRef="con_fastadb"/>
          <arg option="-input_psms_external"           valueRef="novel_psms_w_cosine_external"/>
          <arg option="-protein_coverage"     valueRef="peptide_coverage"/>
          <arg option="-protein_coverage_external"     valueRef="peptide_coverage_merged_external"/>
          <arg option="-output_psms_flag"          valueRef="@export_psms"/>
          <arg option="-output_psms"          valueRef="merged_novel_psms_w_cosine"/>
          <arg option="-output_peptides"      valueRef="novel_peptides_w_cosine"/>
          <arg option="-output_proteins"      valueRef="novel_proteins_w_cosine"/>
          <arg option="-output_exons"      valueRef="novel_exons"/>
          <arg option="-output_mappings"      valueRef="all_mappings"/>
          <arg option="-output_dataset_proteins_hpp"      valueRef="dataset_proteins_hpp"/>
          <arg option="-output_dataset_proteins_all"      valueRef="dataset_proteins_all"/>
          <arg option="-output_task_proteins_hpp"      valueRef="task_proteins_hpp"/>
          <arg option="-output_task_proteins_all"      valueRef="task_proteins_all"/>
          <arg option="-cosine_cutoff"        valueRef="@cosine_threshold"/>
          <arg option="-explained_intensity_cutoff"        valueRef="@explained_intensity_threshold"/>
          <arg option="-annotated_ions_cutoff"        valueRef="@annotated_ions_threshold"/>
          <arg option="-precursor_fdr"        valueRef="@precursor_fdr"/>
          <arg option="-hpp_protein_fdr"        valueRef="@hpp_protein_fdr"/>
          <arg option="-picked_protein_fdr"        valueRef="@picked_protein_fdr"/>
          <arg option="-hpp_protein_fdr_comparison"        valueRef="@hpp_protein_fdr_comparison"/>
          <arg option="-picked_protein_fdr_comparison"        valueRef="@picked_protein_fdr_comparison"/>
          <arg option="-filter_rows_fdr"        valueRef="@filter_rows_fdr"/>
          <arg option="-main_fdr"        valueRef="@main_fdr"/>
          <arg option="-leftover_fdr"        valueRef="@leftover_fdr"/>
          <arg option="-nextprot_releases" pathRef="nextprot_releases"/>
          <arg option="-msv_to_pxd_mapping" pathRef="msv_to_pxd_mapping"/>
          <arg option="-external_provenance"  valueRef="external_provenance"/>
          <arg option="-library_version"      valueRef="@library_version"/>
          <arg option="-library_name"         valueRef="@library_name"/>
          <arg option="-export_explorers"     valueRef="@export_explorers"/>
          <arg option="-explorers_output"     valueRef="explorer_export"/>
          <arg option="-variant_output"     valueRef="@use_variants"/>
          <arg option="-hpp_protein_score_aggregation" valueRef="@hpp_aggregation_function"/>
      </execution>
  </tool>
  
    <tool name="generate_summary">
        <require name="novel_proteins_w_cosine"    type="file"/>
        <produce name="summary" type="file" naming="explicit"  extension="html"/>
        <execution env="binary" argConvention="adhoc">
            <arg pathRef="generate_summary.script"/>
            <arg option="-input_file"        valueRef="novel_proteins_w_cosine"/>
            <arg option="-output_file"       valueRef="summary"/>
            <arg option="-taskid"            valueRef="@task"/>
            <arg option="-input_fdr"         valueRef="@hpp_protein_fdr"/>
        </execution>
    </tool>


  <!-- Exon Mappings -->

  <pathSet base="$base/exon_aux_scripts">
      <pathVar name="make_fasta_from_gff.script" path="MakeFastaDBfromGFF.py" />
  </pathSet>

  <pathSet base="anaconda2">
    <toolPath tool="make_fasta_from_gff" path="bin/python2.7" />
  </pathSet>

  <tool name="make_fasta_from_gff">
      <require name="dna" type="folder"/>
      <require name="gff" type="file"/>
      <require name="params"    type="file"/>
      <produce name="fastadb" type="file" naming="explicit"  extension="fa"/>

      <execution env="binary" argConvention="adhoc">
              <arg pathRef="make_fasta_from_gff.script"/>
              <arg valueRef="dna"/>
              <arg valueRef="gff"/>
              <arg valueRef="fastadb"/>
              <arg valueRef="params"/>
      </execution>
  </tool>

  <!-- <pathSet base="ProteoSAFe-core/0.2">
    <toolPath tool="buildResults" path="ProteoSAFe-core.jar"/>
  </pathSet>
  <tool name="buildResults">
      <require name="novel_proteins_w_cosine" type="file"/>
      <produce name="log" type="file" naming="explicit"/>
      <execution env="java" argConvention="gnu">
  		<mainClass name="edu.ucsd.ccms.ui.BuildResults"/>
  		<envArg option="Xmx8G"/>
  		<arg option="task"   valueRef="@task"/>
  		<arg option="result" value=".workflow/result.xml"/>
      <arg option="result" value=".workflow/result.xml"/>
  		<arg option="log"    valueRef="log"/>
  	</execution>
  </tool> -->

</toolset>
